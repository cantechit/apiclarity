// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DiffType diff type
//
// swagger:model DiffType
type DiffType string

func NewDiffType(value DiffType) *DiffType {
	v := value
	return &v
}

const (

	// DiffTypeZOMBIEDIFF captures enum value "ZOMBIE_DIFF"
	DiffTypeZOMBIEDIFF DiffType = "ZOMBIE_DIFF"

	// DiffTypeSHADOWDIFF captures enum value "SHADOW_DIFF"
	DiffTypeSHADOWDIFF DiffType = "SHADOW_DIFF"

	// DiffTypeGENERALDIFF captures enum value "GENERAL_DIFF"
	DiffTypeGENERALDIFF DiffType = "GENERAL_DIFF"

	// DiffTypeNODIFF captures enum value "NO_DIFF"
	DiffTypeNODIFF DiffType = "NO_DIFF"
)

// for schema
var diffTypeEnum []interface{}

func init() {
	var res []DiffType
	if err := json.Unmarshal([]byte(`["ZOMBIE_DIFF","SHADOW_DIFF","GENERAL_DIFF","NO_DIFF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diffTypeEnum = append(diffTypeEnum, v)
	}
}

func (m DiffType) validateDiffTypeEnum(path, location string, value DiffType) error {
	if err := validate.EnumCase(path, location, value, diffTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this diff type
func (m DiffType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDiffTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this diff type based on context it is used
func (m DiffType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
